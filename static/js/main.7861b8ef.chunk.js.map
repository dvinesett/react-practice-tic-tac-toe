{"version":3,"sources":["index.js"],"names":["Square","props","className","winner","onClick","value","Board","i","this","squares","winnerLine","indexOf","cols","map","renderSquare","rows","row","boardRow","col","length","React","Component","Game","state","history","Array","fill","thisMove","stepNumber","xIsNext","sortAscending","slice","calculateWinner","setState","concat","calculateMoveLocation","step","status","current","moves","move","desc","jumpTo","handleClick","start","reversed","reverse","toggleSort","lines","a","b","c","Math","ceil","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7861b8ef.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nfunction Square(props) {\n  return (\n    <button\n      className={`square ${props.winner ? \"square--winner \" : \"\"}`}\n      onClick={props.onClick}>\n        {props.value}\n    </button>\n  );\n}\n\nclass Board extends React.Component {\n  renderSquare(i) {\n    return (\n      <Square\n        value={this.props.squares[i]}\n        onClick={() => this.props.onClick(i)}\n        winner={this.props.winnerLine.indexOf(i) > -1}  // is this Square in the winnerLine\n      />\n    );\n  }\n\n  boardRow(cols) {\n    return (\n      <div className=\"board-row\">\n        {cols.map((i) => this.renderSquare(i))}\n      </div>\n    )\n  }\n\n  render() {\n    const rows = [0, 1, 2]\n    const cols = [0, 1, 2]\n\n    return (\n      <div>\n        {\n          rows.map((row) => {\n            return this.boardRow(\n              cols.map((col) => row*rows.length + col)\n            );\n          })\n        }\n      </div>\n    )\n  }\n}\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      history: [{\n        squares: Array(9).fill(null),\n        thisMove: [null, null]\n      }],\n      stepNumber: 0,\n      xIsNext: true,\n      sortAscending: true,\n    };\n  }\n\n  handleClick(i) {\n    const history = this.state.history.slice(0, this.state.stepNumber + 1);\n    const current = history[history.length - 1];\n    const squares = current.squares.slice();\n    if (calculateWinner(squares) || squares[i]) {\n      return;\n    }\n    squares[i] = this.state.xIsNext ? 'X' : 'O';\n    this.setState({\n      history: history.concat([{\n        squares: squares,\n        thisMove: calculateMoveLocation(i)\n      }]),\n      stepNumber: history.length,\n      xIsNext: !this.state.xIsNext,\n    });\n  }\n\n  jumpTo(step) {\n    this.setState({\n      stepNumber: step,\n      xIsNext: (step % 2 ) === 0,\n    });\n  }\n\n  toggleSort() {\n    this.setState({\n      sortAscending: !this.state.sortAscending\n    });\n  }\n\n  render() {\n    const history = this.state.history;\n    const current = history[this.state.stepNumber];\n    const winnerLine = calculateWinner(current.squares);\n\n    const moves = history.map((step, move) => {\n      let desc\n      if (move) {\n        desc = 'Go to move #' + move + ' (col: ' +\n                step.thisMove[0] + ', row: ' +\n                step.thisMove[1] + ')';\n      } else {\n        desc = 'Go to game start';\n      }\n      return (\n        <li key={move}>\n          <button\n            onClick={() => this.jumpTo(move)}\n            className={\n              move === this.state.stepNumber ? \"button--current-move\" : \"\"\n            }>\n              {desc}\n          </button>\n        </li>\n      );\n    })\n\n    const sortButton = () => {\n      return (\n        <button onClick={() => this.toggleSort()}>\n          Sort {this.state.sortAscending ? \"descending\" : \"ascending\"}\n        </button>\n      );\n    }\n\n    let status;\n    if (winnerLine) {\n      status = 'Winner: ' + current.squares[winnerLine[0]];\n    } else if (this.state.stepNumber === 9) {\n      status = 'Draw. No one wins'\n    } else {\n      status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\n    } \n\n\n    return (\n      <div className=\"game\">\n        <div className=\"game-board\">\n          <Board \n            squares={current.squares}\n            onClick={(i) => this.handleClick(i)}\n            winnerLine={winnerLine || []}\n          />\n        </div>\n        <div className=\"game-info\">\n          <div>{status}</div>\n          <ol \n            start={this.state.sortAscending ? \"0\" : this.state.history.length - 1}\n            reversed={this.state.sortAscending ? false : true}>\n              {this.state.sortAscending ? moves : moves.reverse()}\n          </ol>\n          <div>{sortButton()}</div>\n        </div>\n      </div>\n    );\n  }\n}\n\n// ========================================\n\nReactDOM.render(\n  <Game />,\n  document.getElementById('root')\n);\n\nfunction calculateWinner(squares) {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return [a, b, c];\n    }\n  }\n  return null;\n}\n\nfunction calculateMoveLocation(i) {\n  return [\n    i%3 + 1,\n    Math.ceil(i/3)\n  ];\n}\n"],"sourceRoot":""}